> Problem: [5. 最长回文子串](https://leetcode.cn/problems/longest-palindromic-substring/description/)

[TOC]

# 思路

**回文串是关于中心对称的。**
因此，一个回文可以围绕其中心展开，并检查两边的字符是否相同。中心可能是一个字符（对于奇数长度的回文），或者在两个字符之间（对于偶数长度的回文）。

# 解题方法

1. 遍历每个可能的中心点：遍历字符串中的每个字符以及每对相邻字符，将它们作为回文的中心。
2. 从中心扩展：对于每个中心点，向两边扩展，直到两边的字符不再匹配。
3. 记录最长的回文子串：在扩展过程中，记录下当前找到的最长回文子串。
4. 返回结果：遍历完成后，返回已记录的最长回文子串。

# 复杂度

时间复杂度:$O(n^2)$。其中 n 是字符串的长度。我们需要围绕每个中心点扩展可能的回文串。
空间复杂度:$O(1)$。不需要额外的空间，只使用几个变量来存储结果。

# Code

* []

```Java
class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() < 1) {
            return "";
        }
        int start = 0;
        int end = 0;
        for (int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i); // 奇数长度的回文
            int len2 = expandAroundCenter(s, i, i + 1); // 偶数长度的回文
            int len = Math.max(len1, len2);
            if (len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }

    private int expandAroundCenter(String s, int left, int right) {
        while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left--;
            right++; 
        }//多进行了一次判断
        return right - left - 1; //原=right - left + 1 - 2
    }
}
```

