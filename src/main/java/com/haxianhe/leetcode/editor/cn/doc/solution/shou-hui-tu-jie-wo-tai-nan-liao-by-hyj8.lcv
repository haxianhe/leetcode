### 解题思路：

#### 从左往右扫的话

- 字符后面是否跟着星号会影响结果，分析起来有点复杂。
  ![image.png](https://pic.leetcode-cn.com/073085fa67286871f76e8e9daa162bdb291a101b4314666c75379a7b0441cad6-image.png)

#### 选择从右往左扫描

- 星号的前面肯定有一个字符，星号也只影响这一个字符，它就像一个拷贝器。

![image.png](https://pic.leetcode-cn.com/5e7b1748039a2a779d7378bebc4926ef3e584e88cc22b67f3a4e18c0590bcc55-image.png)
- s、p 串是否匹配，取决于：最右端是否匹配、剩余的子串是否匹配。
- 只是最右端可能是特殊符号，需要分情况讨论而已。

#### 通用地表示出子问题

- 大子串是否匹配，和剩余子串是否匹配，是规模不一样的同一问题。
  ![image.png](https://pic.leetcode-cn.com/e1bcac2ad07a3a5c959bf0fe5c8ceea9bbd033c3066e7ec7f384aedd98cd95aa-image.png)

#### 情况1：$s[i-1]$ 和 $p[j-1]$ 是匹配的

- 最右端的字符是匹配的，那么，大问题的答案 = 剩余子串是否匹配。
  ![image.png](https://pic.leetcode-cn.com/f817caaa40b0c39fc3ddabfa1383a8218ab364b8e49b30e5ce85cb30a3cdc503-image.png)

#### 情况2：$s[i-1]$ 和 $p[j-1]$ 是不匹配的

- 右端不匹配，还不能判死刑——可能是 $p[j-1]$ 为星号造成的不匹配，星号不是真实字符，它不匹配不算数。
- 如果 $p[j-1]$ 不是星号，那就真的不匹配了。
  ![image.png](https://pic.leetcode-cn.com/fe763378879a0a52e9f17171e3bc1db18cfc83bf59f14efcd31ec9edb37adfac-image.png)

#### $p[j-1]=="*"$，且 $s[i-1]$ 和 $p[j-2]$ 匹配

- $p[j-1]$ 是星号，并且 $s[i-1]$ 和 $p[j-2]$ 匹配，要考虑三种情况：
  - $p[j-1]$ 星号可以让 $p[j-2]$ 在 p 串中消失、出现 1 次、出现 >=2 次。
  - 只要其中一种使得剩余子串能匹配，那就能匹配，见下图 a1、a2、a3。
    ![image.png](https://pic.leetcode-cn.com/a1cc0caf806f7d7f5419d820e0e7be7a364c96656a98ca4d7f351661d6a62aa6-image.png)
  - a3 情况：假设 s 的右端是一个 a，p 的右端是 a * ，* 让 a 重复 >= 2 次
    - 星号不是真实字符，s、p是否匹配，要看 s 去掉末尾的 a，p 去掉末尾一个 a，剩下的是否匹配。
    - 星号拷贝了 >=2 个 a，拿掉一个，剩下 >=1 个a，p 末端依旧是 a* 没变。
    - s 末尾的 a 被抵消了，继续考察 s(0,i-2) 和 p(0,i-1) 是否匹配。

#### $p[j-1]=="*"$，但 $s[i-1]$ 和 $p[j-2]$ 不匹配

- $s[i-1]$ 和 $p[j−2]$ 不匹配，还有救，$p[j−1]$ 星号可以干掉 $p[j−2]$，继续考察 $s(0,i-1)$ 和 $p(0,j-3)$。
  ![image.png](https://pic.leetcode-cn.com/dabf2195c460052e2719340de8f2d22f791694d4443424478201be3b5d601fe1-image.png)

#### base case

- `p` 为空串，`s` 不为空串，肯定不匹配。
- `s` 为空串，但 `p` 不为空串，要想匹配，只可能是右端是星号，它干掉一个字符后，把 `p` 变为空串。
- `s、p` 都为空串，肯定匹配。
  ![image.png](https://pic.leetcode-cn.com/140597adfd5f03dd481e136163d98e7160cce4761c7cb8227010d828f24b7498-image.png)

#### 代码

没有降维，如果空间复杂度没有要求，这么写就行，比较好理解。

* []

```Js
const isMatch = (s, p) => {
  if (s == null || p == null) return false;

  const sLen = s.length, pLen = p.length;

  const dp = new Array(sLen + 1);
  for (let i = 0; i < dp.length; i++) {
    dp[i] = new Array(pLen + 1).fill(false); // 将项默认为false
  }
  // base case
  dp[0][0] = true;
  for (let j = 1; j < pLen + 1; j++) {
    if (p[j - 1] == "*") dp[0][j] = dp[0][j - 2];
  }
  // 迭代
  for (let i = 1; i < sLen + 1; i++) {
    for (let j = 1; j < pLen + 1; j++) {

      if (s[i - 1] == p[j - 1] || p[j - 1] == ".") {
        dp[i][j] = dp[i - 1][j - 1];
      } else if (p[j - 1] == "*") {
        if (s[i - 1] == p[j - 2] || p[j - 2] == ".") {
          dp[i][j] = dp[i][j - 2] || dp[i - 1][j - 2] || dp[i - 1][j];
        } else {
          dp[i][j] = dp[i][j - 2];
        }
      }
    }
  }
  return dp[sLen][pLen]; // 长sLen的s串 是否匹配 长pLen的p串
};
```

