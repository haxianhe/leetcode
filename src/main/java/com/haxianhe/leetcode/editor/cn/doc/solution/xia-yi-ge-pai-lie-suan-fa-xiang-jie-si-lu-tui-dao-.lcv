## 下一个排列

### 问题描述

这道题是 [LeetCode 31题](https://leetcode-cn.com/problems/next-permutation/)。

“下一个排列” 的定义是：给定数字序列的字典序中下一个更大的排列。如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

我们可以将该问题形式化地描述为：给定若干个数字，将其组合为一个整数。如何将这些数字重新排列，以得到下一个更大的整数。如 `123` 下一个更大的数为 `132`。如果没有更大的整数，则输出最小的整数。

以 `1,2,3,4,5,6` 为例，其排列依次为：

* 

```
123456
123465
123546
...
654321
```

可以看到有这样的关系：`123456 < 123465 < 123546 < ... < 654321`。

### 算法推导

如何得到这样的排列顺序？这是本文的重点。我们可以这样来分析：
1. 我们希望下一个数 **比当前数大**，这样才满足 “下一个排列” 的定义。因此只需要 **将后面的「大数」与前面的「小数」交换**，就能得到一个更大的数。比如 `123456`，将 `5` 和 `6` 交换就能得到一个更大的数 `123465`。
2. 我们还希望下一个数 **增加的幅度尽可能的小**，这样才满足“下一个排列与当前排列紧邻“的要求。为了满足这个要求，我们需要：
   1. 在 **尽可能靠右的低位** 进行交换，需要 **从后向前** 查找
   2. 将一个 **尽可能小的「大数」** 与前面的「小数」交换。比如 `123465`，下一个排列应该把 `5` 和 `4` 交换而不是把 `6` 和 `4` 交换
   3. 将「大数」换到前面后，需要将「大数」后面的所有数 **重置为升序**，**升序排列就是最小的排列**。以 `123465` 为例：首先按照上一步，交换 `5` 和 `4`，得到 `123564`；然后需要将 `5` 之后的数重置为升序，得到 `123546`。显然 `123546` 比 `123564` 更小，`123546` 就是 `123465` 的下一个排列

以上就是求 “下一个排列” 的分析过程。

### 算法过程

标准的 “下一个排列” 算法可以描述为：
1. **从后向前** 查找第一个 **相邻升序** 的元素对 `(i,j)`，满足 `A[i] < A[j]`。此时 `[j,end)` 必然是降序
2. 在 `[j,end)` **从后向前** 查找第一个满足 `A[i] < A[k]` 的 `k`。`A[i]`、`A[k]` 分别就是上文所说的「小数」、「大数」
3. 将 `A[i]` 与 `A[k]` 交换
4. 可以断定这时 `[j,end)` 必然是降序，逆置 `[j,end)`，使其升序
5. 如果在步骤 1 找不到符合的相邻元素对，说明当前 `[begin,end)` 为一个降序顺序，则直接跳到步骤 4

该方法支持数据重复，且在 C++ STL 中被采用。

### 代码

* []

```Go
func nextPermutation(nums []int) {
	if len(nums) <= 1 {
		return
	}

	i, j, k := len(nums)-2, len(nums)-1, len(nums)-1

	// find: A[i]<A[j]
	for i >= 0 && nums[i] >= nums[j] {
		i--
		j--
	}

	if i >= 0 { // 不是最后一个排列
		// find: A[i]<A[k]
		for nums[i] >= nums[k] {
			k--
		}
		// swap A[i], A[k]
		nums[i], nums[k] = nums[k], nums[i]
	}

	// reverse A[j:end]
	for i, j := j, len(nums)-1; i < j; i, j = i+1, j-1 {
		nums[i], nums[j] = nums[j], nums[i]
	}
}
```

### 可视化

以求 `12385764` 的下一个排列为例：
![image.png](https://pic.leetcode-cn.com/6e8c9822771be77c6f34cd3086153984eec386fb8376e09e36132ac36bb9cd6f-image.png)

首先从后向前查找第一个相邻升序的元素对 `(i,j)`。这里 `i=4`，`j=5`，对应的值为 `5`，`7`：
![image.png](https://pic.leetcode-cn.com/d7acefea4f7d4e2f19fb5eaa269c448a3098eee53656926a0ab592c564dde150-image.png)

然后在 `[j,end)` 从后向前查找第一个大于 `A[i]` 的值 `A[k]`。这里 `A[i]` 是 `5`，故 `A[k]` 是 `6`：
![image.png](https://pic.leetcode-cn.com/061cf291c237e6f5bcd0554192f894cd0c3e361b4564aa542aabe96e644afbf1-image.png)

将 `A[i]` 与 `A[k]` 交换。这里交换 `5`、`6`：
![image.png](https://pic.leetcode-cn.com/eb1470fd9942da6d2ab4855d13dfadcb715b629b4ea9cba0edfe2d1298744186-image.png)

这时 `[j,end)` 必然是降序，逆置 `[j,end)`，使其升序。这里逆置 `[7,5,4]`：
![image.png](https://pic.leetcode-cn.com/9d627a4ffda635bbf0c4fcdb7b1359c557db8e1c300ab54383a0bc89f6763c18-image.png)

因此，`12385764` 的下一个排列就是 `12386457`。

最后再可视化地对比一下这两个相邻的排列（橙色是蓝色的下一个排列）：
![image.png](https://pic.leetcode-cn.com/e56a66ed318d1761cd8c8f9d1521f82a30c71ecc84f551912b90d8fe254c8f3d-image.png)

